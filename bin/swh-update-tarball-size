#!/usr/bin/env python3

# Copyright (C) 2015  The Software Heritage developers
# See the AUTHORS file at the top-level directory of this distribution
# License: GNU General Public License version 3, or any later version
# See top-level LICENSE file for more information

import argparse
import os
import psycopg2
import sys

from contextlib import contextmanager

from swh.core import hashutil
from swh.loader.tar import file, utils

def entry_to_bytes(entry):
    """Convert an entry coming from the database to bytes"""
    if isinstance(entry, memoryview):
        return entry.tobytes()
    if isinstance(entry, list):
        return [entry_to_bytes(value) for value in entry]
    return entry


def line_to_bytes(line):
    """Convert a line coming from the database to bytes"""
    return line.__class__(entry_to_bytes(entry) for entry in line)


def cursor_to_bytes(cursor):
    """Yield all the data from a cursor as bytes"""
    yield from (line_to_bytes(line) for line in cursor)


class Db:
    """Proxy to the SWH DB, with wrappers around stored procedures

    """

    @classmethod
    def connect(cls, *args, **kwargs):
        """factory method to create a DB proxy

        Accepts all arguments of psycopg2.connect; only some specific
        possibilities are reported below.

        Args:
            connstring: libpq2 connection string

        """
        conn = psycopg2.connect(*args, **kwargs)
        return cls(conn)

    def _cursor(self, cur_arg):
        """get a cursor: from cur_arg if given, or a fresh one otherwise

        meant to avoid boilerplate if/then/else in methods that proxy stored
        procedures

        """
        if cur_arg is not None:
            return cur_arg
        # elif self.cur is not None:
        #     return self.cur
        else:
            return self.conn.cursor()

    def __init__(self, conn):
        """create a DB proxy

        Args:
            conn: psycopg2 connection to the SWH DB

        """
        self.conn = conn

    @contextmanager
    def transaction(self):
        """context manager to execute within a DB transaction

        Yields:
            a psycopg2 cursor

        """
        with self.conn.cursor() as cur:
            try:
                yield cur
                self.conn.commit()
            except:
                if not self.conn.closed:
                    self.conn.rollback()
                raise

    def read_archives(self, cur=None):
        cur = self._cursor(cur)
        q = "select id, metadata#>>'{original_artifact,0,name}' as name from revision where metadata#>>'{original_artifact,0,archive_type}' is not null"
        cur.execute(q)
        yield from cursor_to_bytes(cur)


def parse_args():
    """Parse the configuration from the cli.

    """
    cli = argparse.ArgumentParser(
        description='Tarball listing tarballs size.')
    cli.add_argument('--mirror-root-dir', '-m', help='path to the root dir.')

    args = cli.parse_args()

    return args


if __name__ == '__main__':
    args = parse_args()
    root_dir = args.mirror_root_dir

    revisions = {}
    # line model:
    # dd7c4dd9edb4bbd06b6df503f10d113ab54beff5 "autoconf.texi.tar.gz" "tar"
    db_url = 'service=swh-dev'
    db = Db.connect(db_url)
    with db.transaction() as cur:
        for data in db.read_archives():
            revision_id = hashutil.hash_to_hex(data[0])
            tarname = data[1]
            revisions[tarname] = revision_id

        # scan folder
        for tarpath, _ in file.archives_from(root_dir):
            length = os.path.getsize(tarpath)
            name = os.path.basename(tarpath)

            checksums = utils.convert_to_hex(hashutil.hashfile(tarpath))

            revid = revisions.get(name)

            if revid:
                # query = "update revision set metadata = jsonb_set(metadata, '{original_artifact,0,length}', '%s') where id='\\x%s' and metadata#>>'{original_artifact,0,sha1}' = '%s' and metadata#>>'{original_artifact,0,sha256}' = '%s' and metadata#>>'{original_artifact,0,sha1_git}' = '%s' and metadata#>>'{original_artifact,0,name}' = '%s';" % (length, revid, checksums['sha1'], checksums['sha256'], checksums['sha1_git'], name)
                cur.execute(query)
                print(query)
