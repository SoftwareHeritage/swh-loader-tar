SWH-loader-tar
==============

The Software Heritage Tarball Loader is a tool and a library to uncompress a local
tarball and inject into the SWH dataset all unknown contained files.

Configuration sample
====================

### Tarball loader

#### Configuration

This is the loader's (or task's) configuration file.

loader/tar.ini:

    [main]

    # the path where to extract the tarball before loading it into swh
    extraction_dir = /home/storage/tmp/

    # access to swh's storage
    storage_class = remote_storage
    storage_args = http://localhost:5000/

    # parameters to condition loading into swh storage
    send_contents = True
    send_directories = True
    send_revisions = True
    send_releases = True
    send_occurrences = True
    content_packet_size = 10000
    content_packet_size_bytes = 1073741824
    directory_packet_size = 25000
    revision_packet_size = 100000
    release_packet_size = 100000
    occurrence_packet_size = 100000

Present in possible locations:
- ~/.config/swh/loader/tar.ini
- ~/.swh/loader/tar.ini
- /etc/softwareheritage/loader/tar.ini

#### toplevel

Load tarball directly from code or toplevel:

    from swh.loader.tar.tasks import LoadTarRepository
    from swh.loader.tar import tarball

    # fill in those
    archive = tarball.Tarball('tar',
                              'blah-7.8.3.tgz',
                              '/some/path/to/blah-7.8.3.tgz')

    # Fill in those
    origin = {}
    release = None
    revision = {}
    occurrence = {}

    LoadTarRepository().run(archive, origin, revision, release, [occurrence])

#### celery

Load tarball using celery.

Providing you have a properly configured celery up and running

worker.ini needs to be updated with the following keys:

    task_modules = swh.loader.tar.tasks
    task_queues = swh_loader_tar

cf. https://forge.softwareheritage.org/diffusion/DCORE/browse/master/README.md
for more details

You can send the following message to the task queue:

    from swh.loader.tar.tasks import LoadTarRepository
    from swh.loader.tar import tarball

    # either this one
    # archive_dict = {'nature': 'tar',
    #                 'name': 'blah-7.8.3.tgz',
    #                 'path': '/some/path/to/blah-7.8.3.tgz'}

    # or this one
    archive_dict = tarball.Tarball('tar',
                                   'blah-7.8.3.tgz',
                                   '/some/path/to/blah-7.8.3.tgz').to_dict()

    # Fill in those
    origin = {}
    release = None
    revision = {}
    occurrence = {}

    # Send message to the task queue
    LoadTarRepository().apply_async((archive_dict,
                                     origin,
                                     revision,
                                     release,
                                     [occurrence]))

#### Batch tarball loading

Message producer's configuration file:

    [main]

    # mirror's root directory holding tarballs to load into swh
    mirror_root_directory = /home/storage/space/mirrors/gnu.org/gnu/

    # url scheme prefix used to create the origin url
    url_scheme = http://ftp.gnu.org/gnu/

    # origin type used for those tarballs
    type = ftp

    # For tryouts purposes (no limit if commented or omitted)
    # limit = 1

Trigger the message computations:

    swh-loader-tar-producer ~/.swh/producer/tar.ini
